= Amplify Consoleの機能

//abstract{
AWS Amplify Consoleの機能は、インテグレーション・ビルド・ホスティングの3種類に分類できます。
3つの分類ごとに機能を紹介し、特に筆者がよく使うものについては詳細に解説します。
//}

 =={sec-ext} インテグレーション

GitHubなどのGitプロバイダーと組み合わせて利用するAmplify Consoleですが、手動でビルドを実行することもできます。
そのように、CI/CDパイプラインを任意のタイミングで起動するための機能を紹介します。

 * Gitプロバイダーとの連携機能(GitHub, BitBucket, GitLab, AWS CodeCommit)
 * Pull RequestごとにPreviewの作成
 * ビルド成果物を保存しているストレージの直接指定(Manual Deploy)
 * Incoming WebHookによるビルド実行

=== Pull Request Previewの悩み

Pull Requestを自動で検出してくれるのは良いものの、Previewのビルド・デプロイが成功・失敗したときにbotによるコメントなどはありません。
また、ビルドが失敗した時の原因はAWSのコンソールで確認する必要があります。

=== Incoming WebHookのユースケース

まず挙げられるのは、ヘッドレスCMSなどを用いてコンテンツの更新をトリガーに静的Webサイトをビルドしたいケースです。
ヘッドレスCMSのContentfulではコンソールからリクエストするWebHookを登録できるので、間に連携のためのコードを書かなくてもよいでしょう。

他には、CI自体はCircleCIなどの外部サービスを利用したいケースも考えられます。
例えばテストだけは既存のCIワークフローを利用したい場合や、段階的にAmplifyに移行したい場合に有効ではないでしょうか。

 =={sec-ext} ビルド

内部的にはCodeBuildを利用しており、一般的なCIサービスに求められる要件を満たしていると言えそうです。
End-to-EndテストでUIの証跡を残せる点はポイントかもしれません。

 * ビルド・テスト・デプロイ・キャッシュ利用・環境変数の仕組み
 * ビルドに用いるコンテナイメージ・IAMロールのカスタマイズ
 * ビルドの通知

=== ビルドの通知の悩み

AWSのコンソールからメール通知を設定できます。
また、Amazon EventBridgeを経由することでSNSのトピックで通知を受け取れます。それを利用してSlackへの通知を構築できるので、後ほどご紹介します。

=={sec-ext} ホスティング

内部的にCloudFrontとS3を利用しています。ベーシック認証やキャッシュ無効化など、CloudFrontとS3の構成ではひと手間必要だった機能がマネージドに提供されているのは嬉しいですね。

 * Webサイトのホスティング・CDN
 * Basic認証によるアクセス制限
 * カスタムヘッダーの設定
 * リダイレクトの設定
 * アクセスログ
