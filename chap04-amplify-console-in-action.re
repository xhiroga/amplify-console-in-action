= 実践Amplify Console

//abstract{
発展的な課題について。一番書きたかったやつ（自分とチームへの備忘録）
//}

== カスタムドメインについて
 * 基本だけど環境ごとにドメイン分ける場合はネームスペースごと分けようって話
 * クロスアカウントRoute53の場合にデフォルト選択肢にAレコードが出てこない挙動について
 * CloudFrontからの移行時(特に無停止)の注意

== カスタムビルドについて
 * amplify.ymlの修正コツ
 ** pre buildとbuildの使い分けとか
 * オリジナルDockerコンテナ利用するケース
 ** node12使いたい場合
 * ビルド時のスイッチロール
 ** デフォルトのロールの指定方法
 ** ビルド自体はAWSのAWSアカウントで行われていることとかいろいろ(この辺はCodeBuild使いなら常識なのかも...)
 * (Live package updates使ったことない。便利なのか。。。?)

@<b>{要リサーチ}  
公式のDockerイメージってどこかにないのかな？AWSのDockerHubにはなかった。

== サービスロールを用いたParameter Store & Secrets Managerとの併用
 * そもそもユースケース（環境変数に入れたくない値...ほかアプリと共有する、ビルド時に用いるシークレットである、頻繁に変わる、etc...）
 * クロスアカウントの場合スイッチロールを用いる（この場合 configファイル必須かな？）

== git submodule vs git subtree vs npm
 * どうしてもサブモジュールでやりたい人向けのdeploy key管理方法
 * subtree基本的に楽だが...
 * （npmモジュール化するのがベストと思われるが実際にやったことがないので説得力がない）

== Slack通知
 * Email notificationと言っているがLambdaを起動してくれる
 * 手動でメアドを設定して、自動で作られたトピックをsubscribe…というのは面倒くさいが、いい感じの自動化方法
 * この自動化を荻野さんがどうやったのか確認中...（おそらく捨てメアドをすべてのAmplifyAppに登録する→ルールによって命名されるSNSを自動でSubscribeが一番手っ取り早い?）

== 構成管理
 * AWSアカウントが複数あるケースが前提
 * CFn使ってAmplifyAppを環境ごとに建てるのが正解
 * Preview用Appはdevとアプリ分けるのが正解

== ちょっとしたアイデア: メンテナンス中の画面をカスタムドメインとブランチの切り替えで実現する
 * メンテナンス中です、だけ表示するブランチを作ろう的な
